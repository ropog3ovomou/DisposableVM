PATH=$PATH:/Applications/VMware\ Fusion.app/Contents/Public/
export PATH

copy_files='*.nvram *.vmsd *.vmx *.vmxf'
appdir=DisposableVM
vmplayer="/Applications/VMware Fusion.app/Contents/MacOS/VMware Fusion"
vmrun="vmrun"

mount_point=/Volumes/disposableVM
main_dir=~/Library/Application\ Support/DisposableVM
name_prefix=Disposable
os=mac
fs_delim="/"

echo "OS Vendor: Apple"
echo "DETAILS:HIDE"
echo "PROGRESS:0"
services_on() {
	mkdir -p "$HOME/Library/Services/"
	cp -rf DisposableVM*.workflow "$HOME/Library/Services/"
}
services_off(){
	rm -rf "$HOME/Library/Services"/DisposableVM*.workflow 
}
autorun_on() {
	osascript -e 'tell application "System Events" to make login item at end with properties {path:"/Applications/DisposableVM.app", hidden:false}'
}
autorun_off(){
	osascript -e 'tell application "System Events" to delete login item "DisposableVM"'
}

build(){
	echo "Building the application..."
	cp -p disposable mac.conf bin/app/DisposableVM.app/Contents/Resources/
	vvv=`git tag|tail -n1|cut -c2-`
	sed "s/x-x-x/$vvv/" "bin/app/DisposableVM.pkgproj" > bin/app/pkgproj.tmp
	packagesbuild --project "bin/app/pkgproj.tmp" && 
	productsign --timestamp --sign "Город Золотой" "bin/app/build/DisposableVM.pkg" "bin/DisposableVM-$vvv.pkg" || true
	#rm -f "bin/app/DisposableVM-installer.dmg"
	#create-dmg --volname "DisposableVM Installer" --volicon "bin/app/DisposableVM.app/Contents/Resources/AppIcon.icns" --window-pos 200 120 --window-size 800 400 --icon-size 100 --icon "bin/app/DisposableVM.app/Contents/Resources/AppIcon.icns" 200 190 "bin/app/DisposableVM-installer.dmg" "bin/app/build/"
}
install() {
	build
	killall DisposableVM || true
	echo "Installing the appliation..."
	installer -pkg bin/app/build/DisposableVM.pkg -target /
	open "/Applications/DisposableVM.app"
}

uninstall() {
	autorun_off || true
	services_off || true
	rm -rf /Applications/DisposableVM.app
	rm -rf "$HOME/Library/Application Support/DisposableVM/"
}

deploy(){
 	echo -ne $pwd'\0' | hdiutil create -quiet -size 500g -fs APFS -srcfolder "$cache_dir" -format SPARSE -nospotlight -noanyowners -attach -encryption AES-128 -stdinpass -ov "$file"
}

undeploy() {
	if mounted
	then
		$vmrun  stop $mount_point/*.vmx || true
		umount -f $mount_point
	fi
	rm -f $file.sparseimage
}
mounted() {
	test -d $mount_point
}

run() {
	#open /Applications/VMware\ Fusion.app
	#sleep 1
	$vmrun -T fusion start $mount_point/*.vmx  >/dev/null </dev/null &
	sleep 1
}
